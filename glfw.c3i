module glfw;

import glfw::error;

def UserPointer = void*;

def CBool = CInt;

const VERSION_MAJOR = 3;
const VERSION_MINOR = 4;

const CBool FALSE = 0;
const CBool TRUE = 1;

const DONT_CARE = -1;


fn CBool init() @extern("glfwInit");

fn void terminate() @extern("glfwTerminate");

fn void pollEvents() @extern("glfwPollEvents");

fn void waitEvents() @extern("glfwWaitEvents");

fn void waitEventsTimeout(double timeout) @extern("glfwWaitEventsTimeout");

fn void postEmptyEvent() @extern("glfwPostEmptyEvent");

fn void getVersion(CInt* major, CInt* minor, CInt* revision) @extern("glfwGetVersion");

fn ZString getVersionString() @extern("glfwGetVersionString");

fn Platform getPlatform() @extern("glfwGetPlatform");

fn CBool platformSupported(Platform platform) @extern("glfwPlatformSupported");

fn CBool rawMouseMotionSupported() @extern("glfwRawMouseMotionSupported");

fn double getTime() @extern("glfwGetTime");

fn void setTime() @extern("glfwSetTime");

fn CULong getTimerValue() @extern("glfwGetTimerValue");

fn CULong getTimerFrequency() @extern("glfwGetTimerFrequency");



distinct ConnectionState = CInt;

const ConnectionState CONNECTED = 0x00040001;
const ConnectionState DISCONNECTED = 0x00040002;

struct Image {
    CInt width;
    CInt height;
    CUChar* pixels;
}
