module glfw::vulkan;

import glfw::window;

distinct ProcAddress = void*;

distinct VKInstance = void*;
distinct VkPhysicalDevice = void*;
distinct VkResult = void*;
distinct VkAllocationCallbacks = void*;
distinct VkSurfaceKHR = void*;

def VkGetInstanceProcAddr = fn void(VKInstance instance, ZString name);

/* disclaimer: no idea how this works! */
fn void initVulkanLoader(VkGetInstanceProcAddr loader) @extern("glfwInitVulkanLoader");

fn CBool vulkanSupported() @extern("glfwVulkanSupported");

fn ZString* getRequiredInstanceExtensions(CUInt* count) @extern("glfwGetRequiredInstanceExtensions");

fn ProcAddress VKInstance.getProcAddress(VKInstance instance, ZString name) @extern("glfwGetInstanceProcAddress");

fn CBool VKInstance.getPhysicalDevicePresentationSupport(VKInstance instance,
    VkPhysicalDevice device, CUInt queueFamily) @extern("glfwGetInstanceProcAddress");

fn ProcAddress VKInstance.createWindowSurface(VKInstance instance, Window window,
    VkAllocationCallbacks allocator, VkSurfaceKHR surface) @extern("glfwCreateWindowSurface");
